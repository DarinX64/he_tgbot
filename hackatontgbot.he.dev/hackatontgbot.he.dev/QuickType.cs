// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DataByCountry
    {
        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("stat_by_country")]
        public StatByCountry[] StatByCountry { get; set; }
    }

    public partial class StatByCountry
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("country_name")]
        public string CountryName { get; set; }

        [JsonProperty("total_cases")]
        public string TotalCases { get; set; }

        [JsonProperty("new_cases")]
        public string NewCases { get; set; }

        [JsonProperty("active_cases")]
        public string ActiveCases { get; set; }

        [JsonProperty("total_deaths")]
        public string TotalDeaths { get; set; }

        [JsonProperty("new_deaths")]
        public string NewDeaths { get; set; }

        [JsonProperty("total_recovered")]
        public string TotalRecovered { get; set; }

        [JsonProperty("serious_critical")]
        public string SeriousCritical { get; set; }

        [JsonProperty("region")]
        public object Region { get; set; }

        [JsonProperty("total_cases_per1m")]
        public string TotalCasesPer1M { get; set; }

        [JsonProperty("record_date")]
        public DateTimeOffset RecordDate { get; set; }
    }

    public partial class DataByCountry
    {
        public static DataByCountry FromJson(string json) => JsonConvert.DeserializeObject<DataByCountry>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DataByCountry self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    public partial class CountryData
    {
        [JsonProperty("Country")]
        public string Country { get; set; }

        [JsonProperty("CountryId")]
        public string CountryId { get; set; }

        [JsonProperty("City")]
        public string City { get; set; }

        [JsonProperty("Population")]
        public long Population { get; set; }

        [JsonProperty("Distance")]
        public double Distance { get; set; }

        [JsonProperty("Latitude")]
        public double Latitude { get; set; }

        [JsonProperty("Longitude")]
        public double Longitude { get; set; }
    }

    public partial class CountryData
    {
        public static CountryData[] FromJson(string json) => JsonConvert.DeserializeObject<CountryData[]>(json, QuickType.Converter.Settings);
    }
}
