// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DataByCountry
    {
        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("stat_by_country")]
        public StatByCountry[] StatByCountry { get; set; }
    }

    public partial class StatByCountry
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("country_name")]
        public Country CountryName { get; set; }

        [JsonProperty("total_cases")]
        public TotalCasesUnion TotalCases { get; set; }

        [JsonProperty("new_cases")]
        public string NewCases { get; set; }

        [JsonProperty("active_cases")]
        public ActiveCasesUnion ActiveCases { get; set; }

        [JsonProperty("total_deaths")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotalDeaths { get; set; }

        [JsonProperty("new_deaths")]
        public string NewDeaths { get; set; }

        [JsonProperty("total_recovered")]
        public string TotalRecovered { get; set; }

        [JsonProperty("serious_critical")]
        public string SeriousCritical { get; set; }

        [JsonProperty("region")]
        public object Region { get; set; }

        [JsonProperty("total_cases_per1m")]
        public string TotalCasesPer1M { get; set; }

        [JsonProperty("record_date")]
        public DateTimeOffset RecordDate { get; set; }
    }

    public enum Country { Ukraine };

    public enum ActiveCasesEnum { The1023, The1027, The1045, The1064, The1168, The1194, The1243, The1253, The1389, The1581, The1790, The2073, The2359 };

    public enum TotalCasesEnum { The1072, The1096, The1115, The1225, The1251, The1308, The1319, The1462, The1668, The1892, The2203, The2511 };

    public partial struct ActiveCasesUnion
    {
        public ActiveCasesEnum? Enum;
        public long? Integer;

        public static implicit operator ActiveCasesUnion(ActiveCasesEnum Enum) => new ActiveCasesUnion { Enum = Enum };
        public static implicit operator ActiveCasesUnion(long Integer) => new ActiveCasesUnion { Integer = Integer };
    }

    public partial struct TotalCasesUnion
    {
        public TotalCasesEnum? Enum;
        public long? Integer;

        public static implicit operator TotalCasesUnion(TotalCasesEnum Enum) => new TotalCasesUnion { Enum = Enum };
        public static implicit operator TotalCasesUnion(long Integer) => new TotalCasesUnion { Integer = Integer };
    }

    public partial class DataByCountry
    {
        public static DataByCountry FromJson(string json) => JsonConvert.DeserializeObject<DataByCountry>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DataByCountry self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                ActiveCasesUnionConverter.Singleton,
                ActiveCasesEnumConverter.Singleton,
                TotalCasesUnionConverter.Singleton,
                TotalCasesEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Ukraine")
            {
                return Country.Ukraine;
            }
            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            if (value == Country.Ukraine)
            {
                serializer.Serialize(writer, "Ukraine");
                return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class ActiveCasesUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ActiveCasesUnion) || t == typeof(ActiveCasesUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "1,023":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1023 };
                        case "1,027":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1027 };
                        case "1,045":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1045 };
                        case "1,064":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1064 };
                        case "1,168":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1168 };
                        case "1,194":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1194 };
                        case "1,243":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1243 };
                        case "1,253":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1253 };
                        case "1,389":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1389 };
                        case "1,581":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1581 };
                        case "1,790":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The1790 };
                        case "2,073":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The2073 };
                        case "2,359":
                            return new ActiveCasesUnion { Enum = ActiveCasesEnum.The2359 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ActiveCasesUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ActiveCasesUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ActiveCasesUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ActiveCasesEnum.The1023:
                        serializer.Serialize(writer, "1,023");
                        return;
                    case ActiveCasesEnum.The1027:
                        serializer.Serialize(writer, "1,027");
                        return;
                    case ActiveCasesEnum.The1045:
                        serializer.Serialize(writer, "1,045");
                        return;
                    case ActiveCasesEnum.The1064:
                        serializer.Serialize(writer, "1,064");
                        return;
                    case ActiveCasesEnum.The1168:
                        serializer.Serialize(writer, "1,168");
                        return;
                    case ActiveCasesEnum.The1194:
                        serializer.Serialize(writer, "1,194");
                        return;
                    case ActiveCasesEnum.The1243:
                        serializer.Serialize(writer, "1,243");
                        return;
                    case ActiveCasesEnum.The1253:
                        serializer.Serialize(writer, "1,253");
                        return;
                    case ActiveCasesEnum.The1389:
                        serializer.Serialize(writer, "1,389");
                        return;
                    case ActiveCasesEnum.The1581:
                        serializer.Serialize(writer, "1,581");
                        return;
                    case ActiveCasesEnum.The1790:
                        serializer.Serialize(writer, "1,790");
                        return;
                    case ActiveCasesEnum.The2073:
                        serializer.Serialize(writer, "2,073");
                        return;
                    case ActiveCasesEnum.The2359:
                        serializer.Serialize(writer, "2,359");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ActiveCasesUnion");
        }

        public static readonly ActiveCasesUnionConverter Singleton = new ActiveCasesUnionConverter();
    }

    internal class ActiveCasesEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ActiveCasesEnum) || t == typeof(ActiveCasesEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1,023":
                    return ActiveCasesEnum.The1023;
                case "1,027":
                    return ActiveCasesEnum.The1027;
                case "1,045":
                    return ActiveCasesEnum.The1045;
                case "1,064":
                    return ActiveCasesEnum.The1064;
                case "1,168":
                    return ActiveCasesEnum.The1168;
                case "1,194":
                    return ActiveCasesEnum.The1194;
                case "1,243":
                    return ActiveCasesEnum.The1243;
                case "1,253":
                    return ActiveCasesEnum.The1253;
                case "1,389":
                    return ActiveCasesEnum.The1389;
                case "1,581":
                    return ActiveCasesEnum.The1581;
                case "1,790":
                    return ActiveCasesEnum.The1790;
                case "2,073":
                    return ActiveCasesEnum.The2073;
                case "2,359":
                    return ActiveCasesEnum.The2359;
            }
            throw new Exception("Cannot unmarshal type ActiveCasesEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ActiveCasesEnum)untypedValue;
            switch (value)
            {
                case ActiveCasesEnum.The1023:
                    serializer.Serialize(writer, "1,023");
                    return;
                case ActiveCasesEnum.The1027:
                    serializer.Serialize(writer, "1,027");
                    return;
                case ActiveCasesEnum.The1045:
                    serializer.Serialize(writer, "1,045");
                    return;
                case ActiveCasesEnum.The1064:
                    serializer.Serialize(writer, "1,064");
                    return;
                case ActiveCasesEnum.The1168:
                    serializer.Serialize(writer, "1,168");
                    return;
                case ActiveCasesEnum.The1194:
                    serializer.Serialize(writer, "1,194");
                    return;
                case ActiveCasesEnum.The1243:
                    serializer.Serialize(writer, "1,243");
                    return;
                case ActiveCasesEnum.The1253:
                    serializer.Serialize(writer, "1,253");
                    return;
                case ActiveCasesEnum.The1389:
                    serializer.Serialize(writer, "1,389");
                    return;
                case ActiveCasesEnum.The1581:
                    serializer.Serialize(writer, "1,581");
                    return;
                case ActiveCasesEnum.The1790:
                    serializer.Serialize(writer, "1,790");
                    return;
                case ActiveCasesEnum.The2073:
                    serializer.Serialize(writer, "2,073");
                    return;
                case ActiveCasesEnum.The2359:
                    serializer.Serialize(writer, "2,359");
                    return;
            }
            throw new Exception("Cannot marshal type ActiveCasesEnum");
        }

        public static readonly ActiveCasesEnumConverter Singleton = new ActiveCasesEnumConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TotalCasesUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TotalCasesUnion) || t == typeof(TotalCasesUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "1,072":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1072 };
                        case "1,096":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1096 };
                        case "1,115":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1115 };
                        case "1,225":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1225 };
                        case "1,251":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1251 };
                        case "1,308":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1308 };
                        case "1,319":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1319 };
                        case "1,462":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1462 };
                        case "1,668":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1668 };
                        case "1,892":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The1892 };
                        case "2,203":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The2203 };
                        case "2,511":
                            return new TotalCasesUnion { Enum = TotalCasesEnum.The2511 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new TotalCasesUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type TotalCasesUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TotalCasesUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case TotalCasesEnum.The1072:
                        serializer.Serialize(writer, "1,072");
                        return;
                    case TotalCasesEnum.The1096:
                        serializer.Serialize(writer, "1,096");
                        return;
                    case TotalCasesEnum.The1115:
                        serializer.Serialize(writer, "1,115");
                        return;
                    case TotalCasesEnum.The1225:
                        serializer.Serialize(writer, "1,225");
                        return;
                    case TotalCasesEnum.The1251:
                        serializer.Serialize(writer, "1,251");
                        return;
                    case TotalCasesEnum.The1308:
                        serializer.Serialize(writer, "1,308");
                        return;
                    case TotalCasesEnum.The1319:
                        serializer.Serialize(writer, "1,319");
                        return;
                    case TotalCasesEnum.The1462:
                        serializer.Serialize(writer, "1,462");
                        return;
                    case TotalCasesEnum.The1668:
                        serializer.Serialize(writer, "1,668");
                        return;
                    case TotalCasesEnum.The1892:
                        serializer.Serialize(writer, "1,892");
                        return;
                    case TotalCasesEnum.The2203:
                        serializer.Serialize(writer, "2,203");
                        return;
                    case TotalCasesEnum.The2511:
                        serializer.Serialize(writer, "2,511");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type TotalCasesUnion");
        }

        public static readonly TotalCasesUnionConverter Singleton = new TotalCasesUnionConverter();
    }

    internal class TotalCasesEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TotalCasesEnum) || t == typeof(TotalCasesEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1,072":
                    return TotalCasesEnum.The1072;
                case "1,096":
                    return TotalCasesEnum.The1096;
                case "1,115":
                    return TotalCasesEnum.The1115;
                case "1,225":
                    return TotalCasesEnum.The1225;
                case "1,251":
                    return TotalCasesEnum.The1251;
                case "1,308":
                    return TotalCasesEnum.The1308;
                case "1,319":
                    return TotalCasesEnum.The1319;
                case "1,462":
                    return TotalCasesEnum.The1462;
                case "1,668":
                    return TotalCasesEnum.The1668;
                case "1,892":
                    return TotalCasesEnum.The1892;
                case "2,203":
                    return TotalCasesEnum.The2203;
                case "2,511":
                    return TotalCasesEnum.The2511;
            }
            throw new Exception("Cannot unmarshal type TotalCasesEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TotalCasesEnum)untypedValue;
            switch (value)
            {
                case TotalCasesEnum.The1072:
                    serializer.Serialize(writer, "1,072");
                    return;
                case TotalCasesEnum.The1096:
                    serializer.Serialize(writer, "1,096");
                    return;
                case TotalCasesEnum.The1115:
                    serializer.Serialize(writer, "1,115");
                    return;
                case TotalCasesEnum.The1225:
                    serializer.Serialize(writer, "1,225");
                    return;
                case TotalCasesEnum.The1251:
                    serializer.Serialize(writer, "1,251");
                    return;
                case TotalCasesEnum.The1308:
                    serializer.Serialize(writer, "1,308");
                    return;
                case TotalCasesEnum.The1319:
                    serializer.Serialize(writer, "1,319");
                    return;
                case TotalCasesEnum.The1462:
                    serializer.Serialize(writer, "1,462");
                    return;
                case TotalCasesEnum.The1668:
                    serializer.Serialize(writer, "1,668");
                    return;
                case TotalCasesEnum.The1892:
                    serializer.Serialize(writer, "1,892");
                    return;
                case TotalCasesEnum.The2203:
                    serializer.Serialize(writer, "2,203");
                    return;
                case TotalCasesEnum.The2511:
                    serializer.Serialize(writer, "2,511");
                    return;
            }
            throw new Exception("Cannot marshal type TotalCasesEnum");
        }

        public static readonly TotalCasesEnumConverter Singleton = new TotalCasesEnumConverter();
    }
}
